/* Auto-generated by pgen, do not edit! */
/*
   BNF: 167 bnf items


   toplevel: [ imports_opens ] [ body ]
           ;

   imports_opens: {t-rec}
                 import_open_item imports_opens
                | import_open_item
                ;

   body: {t-rec}
        body_item body
       | body_item
       ;

   ns_body: {t-rec}
           ns_body_item ns_body
          | ns_body_item
          ;

   ns_body_item: definition
               | namespace_management
               | namespace_other
               ;

   namespace_other: instance
                  | connection
                  | alias
                  ;

   body_item: namespace_management
            | base_item
            | definition
            ;

   import_open_item: {excl}
                    import_item
                   | open_item
                   ;

   import_item: "import" STRING ";"
              | "import" [ "::" ] { ID "::" }* [ "->" ID ] ";"
              | "import" ID "=>" ID ";"
              ;

   open_item: "open" qualified_ns "->" ID ";"
            | "open" qualified_ns ";"
            ;

   namespace_management: [ "export" ] "namespace" ID "{" [ ns_body ] "}"
                       ;

   qualified_ns: [ "::" ] { ID "::" }*
               ;

   param_type: {excl}
              "pint"
             | "pbool"
             | "preal"
             | "ptype" "(" iface_inst_type ")"
             ;

   T_INT: {excl}
         "int"
        | "ints"
        ;

   data_type: {excl}
             T_INT [ chan_dir ] [ "<" !endgt wpint_expr ">" !noendgt ]
            | "bool" [ chan_dir ]
            | "enum" [ chan_dir ] "<" wpint_expr ">"
            ;

   chan_type: "chan" [ chan_dir ] "(" physical_inst_type
                [ "," physical_inst_type ] ")" [ chan_dir ]
            ;

   chan_dir: {excl}
            "?"
           | "!"
           | "?!"
           | "!?"
           ;

   physical_inst_type: {excl}
                      data_type
                     | chan_type
                     | user_type
                     ;

   iface_inst_type: user_type
                  ;

   inst_type: {excl}
             physical_inst_type
            | param_type
            ;

   user_type: qualified_type [ chan_dir ] [ template_args ]
            ;

   template_args: "<" !endgt { array_expr_or_type "," }* ">" !noendgt
                ;

   array_expr_or_type: {excl}
                      "@" user_type
                     | array_expr
                     ;

   qualified_type: [ "::" ] { ID "::" }*
                 ;

   dense_range: {t-rec}
               dense_one_range dense_range
              | dense_one_range
              ;

   dense_one_range: "[" wpint_expr "]"
                  ;

   sparse_range: {t-rec}
                sparse_one_range sparse_range
               | sparse_one_range
               ;

   sparse_one_range: "[" !noreal wpint_expr [ ".." wpint_expr ] "]"
                   ;

   xsparse_range: {t-rec}
                 xsparse_one_range xsparse_range
                | xsparse_one_range
                ;

   xsparse_one_range: "[" !noreal wint_expr [ ".." wint_expr ] "]"
                    ;

   definition: defproc_or_cell
             | defdata
             | defchan
             | deffunc
             | defiface
             ;

   def_or_proc: {excl}
               "defproc"
              | "defcell"
              ;

   template_spec: [ "export" ] "template" "<" { param_inst ";" }* ">"
                | "export"
                ;

   param_inst: param_type id_list
             ;

   id_list: { ID [ dense_range ] "," }**
          ;

   defproc_or_cell: [ template_spec ] def_or_proc ID
                      [ "<:" physical_inst_type ] "("
                      [ port_formal_list ] ")" proc_body
                  ;

   proc_body: [ ":>" interface_spec ] [ "+{" override_spec "}" ] ";"
            | [ ":>" interface_spec ]
                [ "+{" override_spec "}" ] "{" def_body
                [ methods_body ] "}"
            ;

   interface_spec: { interface_one_spec "," }*
                 ;

   interface_one_spec: iface_inst_type "{" { idmap "," }* "}"
                     ;

   idmap: ID "->" ID
        ;

   override_spec: {t-rec}
                 override_one_spec override_spec
                | override_one_spec
                ;

   override_one_spec: user_type bare_id_list ";"
                    ;

   port_formal_list: { single_port_item ";" }*
                   ;

   macro_formal_list: { single_macro_port_item ";" }*
                    ;

   function_formal_list: {excl}
                        port_formal_list
                       | param_formal_list
                       ;

   param_formal_list: { param_inst ";" }*
                    ;

   func_ret_type: {excl}
                 physical_inst_type
                | param_type
                ;

   single_port_item: physical_inst_type id_list
                   ;

   single_macro_port_item: physical_inst_type id_list
                         ;

   defdata: [ template_spec ] "deftype" ID [ "<:" physical_inst_type ] "("
              [ port_formal_list ] ")" data_chan_body
          ;

   data_chan_body: {excl}
                  ";"
                 | [ "+{" override_spec "}" ] "{" base_body
                     [ methods_body ] "}"
                 ;

   methods_body: "methods" "{" [ method_list ] "}"
               ;

   method_list: {t-rec}
               one_method method_list
              | one_method
              ;

   one_method: ID "{" hse_body "}"
             | ID "=" wint_or_bool_expr ";"
             | "macro" ID "(" [ macro_formal_list ] ")" "{"
                 [ chp_body ] "}"
             ;

   base_body: base_body_item base_body
            |
            ;

   base_body_item: lang_spec
                 | alias
                 | loop_base
                 | conditional_base
                 | assertion
                 | debug_output
                 ;

   defchan: [ template_spec ] "defchan" ID "<:" physical_inst_type "("
              [ port_formal_list ] ")" data_chan_body
          ;

   defenum: "defenum" ID enum_body
          ;

   enum_body: {excl}
             ";"
            | "{" bare_id_list "}" ";"
            ;

   bare_id_list: { ID "," }*
               ;

   deffunc:
              [ template_spec ] "function" ID "(" function_formal_list ")" ":" func_ret_type func_body
          ;

   func_body: {excl}
             ";"
            | "{" [ func_body_items ] "}"
            ;

   func_body_items: alias_or_inst_list lang_chp
                  ;

   alias_or_inst_list: al_item alias_or_inst_list
                     |
                     ;

   al_item: {excl}
           instance
          | assertion
          | debug_output
          ;

   def_body: base_item_list
           |
           ;

   base_item_list: {t-rec}
                  base_item base_item_list
                 | base_item
                 ;

   base_item: instance
            | connection
            | alias
            | language_body
            | loop
            | conditional
            | assertion
            | debug_output
            ;

   debug_output: "${" { chp_log_item "," }* "}" ";"
               ;

   assertion: "{" wbool_expr [ ":" STRING ] "}" ";"
            | "{" expr_id conn_op expr_id [ ":" STRING ] "}" ";"
            ;

   conn_op: {excl}
           "==="
          | "!=="
          ;

   instance: inst_type { instance_id "," }* ";"
           ;

   special_connection_id: ID [ dense_range ] "(" port_conn_spec ")"
                            [ "@" attr_list ]
                        | ID [ dense_range ] "@" attr_list
                        ;

   instance_id: ID [ sparse_range ] [ "(" port_conn_spec ")" ]
                  [ "@" attr_list ] opt_extra_conn
              ;

   opt_extra_conn: [ "=" { array_expr "=" }** ]
                 ;

   port_conn_spec: { "." ID "=" array_expr "," }**
                 | { opt_array_expr "," }*
                 ;

   alias: lhs_array_expr "=" array_expr ";"
        ;

   connection: special_connection_id ";"
             ;

   loop: {excl}
        "(" [ ";" ] ID ":" !noreal wpint_expr
          [ ".." wpint_expr ] ":" base_item_list ")"
       | "*[" { gc_1 "[]" }* "]"
       ;

   conditional: "[" guarded_cmds "]"
              ;

   guarded_cmds: { gc_1 "[]" }*
               ;

   gc_1: {excl}
        wbool_expr "->" base_item_list
       | "(" "[]" ID ":" !noreal wpint_expr
           [ ".." wpint_expr ] ":" wbool_expr "->" base_item_list ")"
       | "else" "->" base_item_list
       ;

   loop_base: {excl}
             "(" [ ";" ] ID ":" !noreal wpint_expr
               [ ".." wpint_expr ] ":" base_body ")"
            | "*[" { gc_1_base "[]" }* "]"
            ;

   conditional_base: "[" guarded_cmds_base "]"
                   ;

   guarded_cmds_base: { gc_1_base "[]" }*
                    ;

   gc_1_base: {excl}
             wbool_expr "->" base_body
            | "(" "[]" ID ":" !noreal wpint_expr
                [ ".." wpint_expr ] ":" wbool_expr "->" base_body ")"
            | "else" "->" base_body
            ;

   defiface: [ template_spec ] "interface" ID "("
               [ port_formal_list ] ")" ";"
           ;

   language_body: {excl}
                 lang_chp
                | lang_hse
                | lang_prs
                | lang_spec
                | lang_refine
                | lang_size
                | lang_initialize
                | lang_dataflow
                ;

   supply_spec: "<" bool_expr_id [ "," bool_expr_id ]
                  [ "|" bool_expr_id "," bool_expr_id ] ">"
              ;

   lang_chp: "chp" [ supply_spec ] "{" [ chp_body ] "}"
           ;

   lang_hse: "hse" [ supply_spec ] "{" [ hse_bodies ] "}"
           ;

   lang_prs: "prs" [ supply_spec ] [ "*" ] "{" [ prs_body ] "}"
           ;

   lang_spec: "spec" "{" spec_body "}"
            ;

   chp_body: { chp_comma_list ";" }*
           ;

   chp_comma_list: { chp_body_item "," }*
                 ;

   chp_body_item: [ ID ":" ] base_stmt
                | [ ID ":" ] select_stmt
                | [ ID ":" ] loop_stmt
                | "(" ";" ID ":" !noreal wpint_expr
                    [ ".." wpint_expr ] ":" chp_body ")"
                | "(" "," ID ":" !noreal wpint_expr
                    [ ".." wpint_expr ] ":" chp_body ")"
                ;

   base_stmt: send_stmt
            | recv_stmt
            | assign_stmt
            | "skip"
            | "(" chp_body ")"
            | ID "(" { chp_log_item "," }* ")"
            | base_id "." ID "(" [ { w_expr "," }** ] ")"
            ;

   chp_log_item: {excl}
                w_expr
               | STRING
               ;

   send_stmt: chan_expr_id snd_type [ w_expr ]
                [ rcv_type gen_assignable_id ]
            ;

   snd_type: {excl}
            "!"
           | "!+"
           | "!-"
           ;

   gen_assignable_id: {excl}
                     assignable_expr_id
                    | "bool" "(" assignable_expr_id ")"
                    | "int" "(" assignable_expr_id ")"
                    ;

   recv_stmt: chan_expr_id rcv_type [ gen_assignable_id ]
                [ snd_type w_expr ]
            ;

   rcv_type: {excl}
            "?"
           | "?+"
           | "?-"
           ;

   assign_stmt: assignable_expr_id ":=" w_expr_chp
              | bool_expr_id dir
              ;

   select_stmt: "[" { guarded_cmd "[]" }* "]"
              | "[" wbool_allow_chan_expr "]"
              | "[|" { guarded_cmd "[]" }* "|]"
              ;

   guarded_cmd: {excl}
               wbool_allow_chan_expr "->" chp_body
              | "(" "[]" ID ":" !noreal wpint_expr
                  [ ".." wpint_expr ] ":" wbool_allow_chan_expr "->" chp_body ")"
              | "else" "->" chp_body
              ;

   loop_stmt: "*[" chp_body [ "<-" wbool_expr ] "]"
            | "*[" { guarded_cmd "[]" }* "]"
            ;

   hse_bodies: hse_body
             | labelled_hse_bodies
             ;

   labelled_hse_bodies: { label_hse_fragment ";" }*
                      ;

   label_hse_fragment: ID ":" hse_body ":" ID
                     ;

   hse_body: { hse_comma_item ";" }*
           ;

   hse_comma_item: { hse_body_item "," }*
                 ;

   hse_body_item: "(" ";" ID ":" !noreal wpint_expr
                    [ ".." wpint_expr ] ":" hse_body ")"
                | "(" "," ID ":" !noreal wpint_expr
                    [ ".." wpint_expr ] ":" hse_body ")"
                | hse_loop_stmt
                | hse_select_stmt
                | "skip"
                | "(" hse_body ")"
                | hse_assign_stmt
                ;

   hse_assign_stmt: bool_expr_id dir
                  | assignable_expr_id ":=" w_expr
                  ;

   hse_select_stmt: "[" { hse_guarded_cmd "[]" }* "]"
                  | "[" wbool_expr "]"
                  | "[|" { hse_guarded_cmd "[]" }* "|]"
                  ;

   hse_guarded_cmd: {excl}
                   wbool_expr "->" hse_body
                  | "(" "[]" ID ":" !noreal wpint_expr
                      [ ".." wpint_expr ] ":" wbool_expr "->" chp_body ")"
                  | "else" "->" hse_body
                  ;

   hse_loop_stmt: "*[" hse_body "]"
                | "*[" { hse_guarded_cmd "[]" }* "]"
                ;

   prs_body: {t-rec}
            [ attr_list ] single_prs prs_body
           | [ attr_list ] single_prs
           ;

   attr_list: "[" { ID "=" w_expr ";" }** "]"
            ;

   single_prs:EXTERN[prs_expr] arrow bool_expr_id dir
             |EXTERN[prs_expr] arrow "@" ID dir
             | ID [ tree_subckt_spec ] "{" prs_body "}"
             | "(" ID ":" !noreal wpint_expr
                 [ ".." wpint_expr ] ":" prs_body ")"
             | "passn" size_spec "(" bool_expr_id "," bool_expr_id "," bool_expr_id ")"
             | "passp" size_spec "(" bool_expr_id "," bool_expr_id "," bool_expr_id ")"
             | "transgate" size_spec "(" bool_expr_id "," bool_expr_id "," bool_expr_id "," bool_expr_id ")"
             ;

   arrow: {excl}
         "->"
        | "=>"
        | "#>"
        ;

   dir: {excl}
       "+"
      | "-"
      ;

   tree_subckt_spec: "<" wpint_expr ">"
                   | "<" STRING ">"
                   ;

   bool_expr_id: expr_id
               ;

   bool_expr_id_or_array: expr_id
                        ;

   chan_expr_id: expr_id
               ;

   assignable_expr_id: expr_id
                     ;

   size_spec: "<" wnumber_expr [ "," wnumber_flav_expr ] [ "," ID ]
                [ ";" wpint_expr ] ">"
            |
            ;

   spec_body: [ requires_clause ] [ ensures_clause ] [ generic_clause ]
            ;

   requires_clause: "requires" "{" base_spec_body "}"
                  ;

   ensures_clause: "ensures" "{" base_spec_body "}"
                 ;

   generic_clause: base_spec_body
                 ;

   base_spec_body: {t-rec}
                  spec_body_item base_spec_body
                 | spec_body_item
                 ;

   spec_body_item: {excl}
                  ID "(" { bool_expr_id_or_array "," }* ")"
                 | "timing" [ bool_expr_id [ dir ] ":" ]
                     [ "?" ] bool_expr_id_or_array [ "*" ]
                     [ dir ] timing_type
                     [ "[" wpint_expr "]" ] bool_expr_id_or_array [ "*" ]
                     [ dir ]
                 ;

   timing_type: {excl}
               "<"
              | "<<"
              | "->"
              ;

   lang_size: "sizing" "{" [ size_body ] "}"
            ;

   size_directive: {excl}
                  bool_expr_id "{" dir wnumber_expr [ "," ID ]
                    [ "," wpint_expr ] [ ";" dir wnumber_expr [ "," ID ]
                    [ "," wpint_expr ] ] "}"
                 | "(" ";" ID ":" !noreal wpint_expr
                     [ ".." wpint_expr ] ":" { size_directive ";" }* ")"
                 ;

   size_setup: ID "<-" wnumber_expr
             |
             ;

   size_body: { size_setup ";" }* { size_directive ";" }*
            ;

   lang_refine: "refine" "{" base_item_list "}"
              ;

   lang_initialize: "Initialize" "{" { action_items ";" }* "}"
                  ;

   action_items: ID "{" hse_body "}"
               ;

   lang_dataflow: "dataflow" "{" [ dataflow_ordering ]
                    { dataflow_items ";" }* "}"
                ;

   dataflow_ordering: ID "{" { order_list ";" }* "}"
                    ;

   order_list: { w_chan_id "," }* "<" { w_chan_id "," }*
             ;

   dataflow_items: w_chan_int_expr "->" [ "[" wpint_expr
                     [ "," wpint_expr ] "]" ] expr_id
                 | w_chan_int_expr "->" [ "(" wpint_expr
                     [ "," wpint_expr ] ")" ] expr_id
                 | "{" expr_id_or_star_or_bar "}"
                     { expr_id_or_star "," }* "->" { expr_id_or_star "," }*
                 | "dataflow_cluster" "{" { dataflow_items ";" }* "}"
                 | expr_id "->" "*"
                 ;

   expr_id_or_star: {excl}
                   expr_id
                  | "*"
                  ;

   expr_id_or_star_or_bar: {excl}
                          expr_id_or_star
                         | "|"
                         ;

   array_expr: { array_term "#" }*
             ;

   array_term: {excl}
              "{" { array_expr "," }* "}"
             | w_c_expr
             ;

   lhs_array_expr: { lhs_array_term "#" }*
                 ;

   lhs_array_term: {excl}
                  "{" { lhs_array_expr "," }* "}"
                 | expr_id
                 ;

   opt_array_expr: [ array_expr ]
                 ;

   expr_id: { base_id "." }*
          ;

   base_id: ID [ xsparse_range ]
          ;

   w_c_expr: expr
           ;

   w_expr: expr
         ;

   w_expr_chp:EXTERN[fexpr]
             ;

   w_chan_int_expr:EXTERN[fexpr]
                  ;

   wnumber_expr: expr
               ;

   wnumber_flav_expr: expr
                    ;

   wint_or_bool_expr: expr
                    ;

   wint_expr: int_expr
            ;

   wpint_expr: int_expr
             ;

   wbool_expr: bool_expr
             ;

   wbool_allow_chan_expr: bool_expr
                        ;

   w_chan_id: expr_id
            ;


*/
